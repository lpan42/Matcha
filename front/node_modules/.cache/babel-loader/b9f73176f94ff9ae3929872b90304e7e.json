{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = value => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  const {\n    ref\n  } = field;\n\n  if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!isKey(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (isHTMLElement(field.ref) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = element => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = element => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const {\n    ref,\n    ref: {\n      name,\n      type\n    },\n    mutationWatcher\n  } = field;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    const {\n      options\n    } = fieldValue;\n\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref,\n        mutationWatcher\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = element => !!element && element.type === 'file';\n\nvar isMultipleSelect = element => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const {\n    name,\n    value\n  } = ref;\n  const field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\n  const output = {};\n  const isSearchString = isString(search);\n  const isSearchArray = isArray(search);\n  const isNest = search && search.nest;\n\n  for (const name in fields) {\n    if (isUndefined(search) || isNest || isSearchString && name.startsWith(search) || isSearchArray && search.find(data => name.startsWith(data))) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  }\n\n  return output;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => {\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\n  const isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    const message = isStringValue ? result : '';\n    return {\n      type,\n      message,\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value: requiredValue,\n      message: requiredMessage\n    } = isString(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const {\n      value: maxValue,\n      message: maxMessage\n    } = getValueAndMessage(max);\n    const {\n      value: minValue,\n      message: minMessage\n    } = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax = maxLength && inputLength > maxLengthValue;\n    const exceedMin = minLength && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message: patternMessage\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      const validateFunctions = Object.entries(validate);\n      const validationResult = await new Promise(resolve => {\n        validateFunctions.reduce(async (previous, [key, validate], index) => {\n          if (!isEmptyObject((await previous)) && !validateAllFieldCriteria || !isFunction(validate)) {\n            return resolve(previous);\n          }\n\n          let result;\n          const validateResult = await validate(fieldValue);\n          const validateError = getValidateError(validateResult, validateRef, key);\n\n          if (validateError) {\n            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              error[name] = result;\n            }\n          } else {\n            result = previous;\n          }\n\n          return validateFunctions.length - 1 === index ? resolve(result) : result;\n        }, {});\n      });\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n  if (validationResolver) {\n    return validationResolver(data, context);\n  }\n\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false,\n        context\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\n  let value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = watchFieldArray ? watchFieldArray : undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (isArray(watchFieldArray) && isArray(value) && value.length !== watchFieldArray.length) {\n      value = watchFieldArray;\n    }\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => isMatchFieldArrayName(name, current) ? true : prev, false);\n\nvar isFileListObject = data => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  let index = -1;\n  let length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  const result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  object = parent(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  return !(object != null) || delete object[key];\n}\n\nfunction unset(object, paths) {\n  paths.forEach(path => {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst {\n  useRef,\n  useState,\n  useCallback,\n  useEffect\n} = React;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  validationResolver,\n  validationContext,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const watchFieldArrayRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const fieldArrayNamesRef = useRef(new Set());\n  const [, render] = useState();\n  const {\n    isOnBlur,\n    isOnSubmit\n  } = useRef(modeChecker(mode)).current;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const shouldValidateCallback = !!(validationSchema || validationResolver);\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb && 'Proxy' in window;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit\n  } = useRef(modeChecker(reValidateMode)).current;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateCallback) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateCallback]);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const ref = field.ref;\n    const options = field.options;\n    const {\n      type\n    } = ref;\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(ref)) {\n      if (isEmptyString(value) || isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return !!type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    let isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      const fieldArrayName = name.substring(0, name.indexOf('['));\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  const setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, name, true);\n    }\n  }, [setFieldValue]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    shouldRenderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async payload => {\n    const {\n      errors\n    } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContext);\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      shouldRenderBaseOnError(payload, get(errors, payload) ? {\n        [payload]: get(errors, payload)\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationContext, validationResolver, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (shouldValidateCallback) {\n      return executeSchemaValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaValidation, executeValidation, reRender, shouldValidateCallback]);\n\n  const isFieldWatched = name => {\n    const preFixName = (name.match(/\\w+/) || [])[0];\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has(preFixName) && !isKey(name) && fieldArrayNamesRef.current.has(preFixName);\n  };\n\n  const setValue = useCallback((name, value, shouldValidate) => {\n    const shouldRender = setInternalValue(name, value) || isFieldWatched(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (shouldValidate) {\n      triggerValidation(name);\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (shouldValidateCallback) {\n      const {\n        errors\n      } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContext);\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldUpdateState = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback((values = {}) => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContext).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationContext, validationResolver]);\n\n  const removeFieldEventListener = (field, forceDelete) => {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    const {\n      name\n    } = field.ref;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateCallback) {\n        validateSchemaIsValid();\n      }\n    }\n  }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    const watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormStateRef.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames) ? watchFieldArrayRef.current[fieldNames] : undefined);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        let value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValuesRef.current;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\n    let currentField = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray = false;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [...(currentField && currentField.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (shouldValidateCallback && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors;\n    let fieldValues;\n    const fields = fieldsRef.current;\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (shouldValidateCallback) {\n        fieldValues = getFieldsValues(fields);\n        const {\n          errors,\n          values\n        } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContext);\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        const {\n          errors,\n          values\n        } = await Object.values(fields).reduce(async (previous, field) => {\n          if (!field) {\n            return previous;\n          }\n\n          const resolvedPrevious = await previous;\n          const {\n            ref,\n            ref: {\n              name\n            }\n          } = field;\n\n          if (!fields[name]) {\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n          if (fieldError[name]) {\n            set(resolvedPrevious.errors, name, fieldError[name]);\n            validFieldsRef.current.delete(name);\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          if (fieldsWithValidationRef.current.has(name)) {\n            validFieldsRef.current.add(name);\n          }\n\n          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n          return Promise.resolve(resolvedPrevious);\n        }, Promise.resolve({\n          errors: {},\n          values: {}\n        }));\n        fieldErrors = errors;\n        fieldValues = values;\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError && isWeb) {\n          focusErrorField(fields, fieldErrors);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [isWeb, reRender, shouldValidateCallback, submitFocusError, validateAllFieldCriteria, validationContext, validationResolver, validationSchema]);\n\n  const resetRefs = () => {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    touchedFieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  const reset = values => {\n    if (isWeb) {\n      for (const value of Object.values(fieldsRef.current)) {\n        if (value && isHTMLElement(value.ref) && value.ref.closest) {\n          try {\n            value.ref.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs();\n    reRender();\n  };\n\n  const getValues = payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    return payload && payload.nest ? transformToNestObject(fieldValues) : fieldValues;\n  };\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateCallback) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  const control = Object.assign(Object.assign({\n    register,\n    unregister,\n    removeFieldEventListener,\n    getValues,\n    setValue,\n    triggerValidation\n  }, shouldValidateCallback ? {\n    validateSchemaIsValid\n  } : {}), {\n    formState,\n    mode: {\n      isOnBlur,\n      isOnSubmit\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    watchFieldArrayRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  });\n  return {\n    watch,\n    control,\n    handleSubmit,\n    setValue,\n    triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, []),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  const context = useContext(FormGlobalContext);\n  if (!isUndefined(context)) return context;\n  throw new Error('Missing FormContext');\n}\n\nfunction FormContext(_a) {\n  var {\n    children,\n    formState,\n    errors\n  } = _a,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = (value, keyName) => Object.assign(Object.assign({}, isObject(value) ? value : {\n  value\n}), {\n  [keyName]: generateId()\n});\n\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : data.filter((_, i) => (isArray(index) ? index : [index]).indexOf(i) < 0);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) && ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [...(isArray(value) ? value : [value || null]), ...data];\n\nvar insertAt = (data, index, value) => [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n\nvar fillEmptyArray = value => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst {\n  useEffect: useEffect$1,\n  useRef: useRef$1,\n  useState: useState$1\n} = React;\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id'\n}) => {\n  const methods = useFormContext();\n  const {\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    getValues,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldArrayRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    validateSchemaIsValid\n  } = control || methods.control;\n  const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\n  const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\n\n  const appendValueWithKey = value => value.map(v => appendId(v, keyName));\n\n  const commonTasks = fieldsValues => {\n    watchFieldArrayRef.current[name] = fieldsValues;\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues\n      });\n    }\n  };\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = getValues({\n      nest: true\n    })[name];\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    mapCurrentFieldsValueWithState();\n\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = true;\n    }\n\n    commonTasks([...fields, ...(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])]);\n  };\n\n  const prepend = value => {\n    mapCurrentFieldsValueWithState();\n    resetFields();\n    commonTasks(prependAt(fields, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\n    }\n  };\n\n  const remove = index => {\n    if (!isUndefined(index)) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(removeArrayAt(fields, index));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      fields.forEach((field, fieldIndex) => {\n        if (isUndefined(index) || fieldIndex === index || isArray(index) && index.indexOf(fieldIndex) >= 0) {\n          for (const key in field) {\n            const removeFieldName = `${name}[${index}].${key}`;\n            validFieldsRef.current.delete(removeFieldName);\n            fieldsWithValidationRef.current.delete(removeFieldName);\n          }\n        }\n      });\n    }\n  };\n\n  const insert = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(insertAt(fields, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(fields, indexA, indexB);\n    commonTasks([...fields]);\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(fields, from, to);\n    commonTasks([...fields]);\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect$1(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    watchFieldArrayRef.current[name] = {};\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap,\n    move,\n    prepend,\n    append,\n    remove,\n    insert,\n    fields\n  };\n};\n\nvar getInputValue = (target, isCheckbox) => {\n  if (isNullOrUndefined(target)) {\n    return target;\n  }\n\n  return isCheckbox ? isUndefined(target.checked) ? target : target.checked : isUndefined(target.value) ? target : target.value;\n};\n\nconst Controller = _a => {\n  var {\n    name,\n    rules,\n    as: InnerComponent,\n    onBlur,\n    onChange,\n    onChangeName = VALIDATION_MODE.onChange,\n    onBlurName = VALIDATION_MODE.onBlur,\n    valueName,\n    defaultValue,\n    control\n  } = _a,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\n\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    removeFieldEventListener,\n    triggerValidation,\n    mode: {\n      isOnSubmit,\n      isOnBlur\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    formState: {\n      isSubmitted\n    },\n    fieldsRef,\n    fieldArrayNamesRef\n  } = control || methods.control;\n  const [value, setInputStateValue] = useState$2(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  const valueRef = useRef$2(value);\n  const isCheckboxInput = isBoolean(value);\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = target => {\n    const data = getInputValue(target, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = e => {\n    const data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = () => {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), Object.assign({}, rules));\n  };\n\n  if (!fieldsRef.current[name]) {\n    registerField();\n    setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  }\n\n  useEffect$2(() => {\n    registerField();\n    return () => {\n      if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        unregister(name);\n      }\n    };\n  }, [name]);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), onBlur || shouldReValidateOnBlur ? {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props));\n};\n\nconst ErrorMessage = _a => {\n  var {\n    as: InnerComponent,\n    errors,\n    name,\n    message,\n    children\n  } = _a,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const {\n    message: messageFromRegister,\n    types\n  } = error;\n  const props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/Users/lpan/Desktop/Matcha/front/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","createContext","useContext","createElement","useState","useState$2","useRef","useRef$2","useEffect","useEffect$2","isValidElement","cloneElement","Fragment","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","forEach","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","isEmptyObject","keys","compareObject","objectA","objectB","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","validationResult","Promise","resolve","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","e","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","watchFieldArray","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","unset","paths","modeChecker","mode","isOnChange","useCallback","useForm","reValidateMode","validationContext","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldArrayRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","isFieldWatched","preFixName","setValue","shouldValidate","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","resolvedPrevious","fieldError","resetRefs","reset","closest","_a","resetFieldArray","getValues","formState","control","Proxy","prop","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","Error","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","removeArrayAt","_","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prependAt","insertAt","slice","fillEmptyArray","fill","useEffect$1","useRef$1","useState$1","useFieldArray","methods","memoizedDefaultValues","setField","appendValueWithKey","v","commonTasks","fieldsValues","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend","remove","fieldIndex","removeFieldName","insert","swap","move","resetFunctions","fieldArrayNames","getInputValue","isCheckbox","Controller","rules","as","InnerComponent","onChangeName","onBlurName","valueName","rest","setInputStateValue","valueRef","isCheckboxInput","commonTask","eventWrapper","event","arg","registerField","defineProperty","shouldReValidateOnBlur","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (isHTMLElement(field.ref) && field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = (element) => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => !!element && element.type === 'file';\n\nvar isMultipleSelect = (element) => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isString(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = watchFieldArray ? watchFieldArray : undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (isArray(watchFieldArray) &&\r\n            isArray(value) &&\r\n            value.length !== watchFieldArray.length) {\r\n            value = watchFieldArray;\r\n        }\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    object = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    return !(object != null) || delete object[key];\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach(path => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldArrayRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContext);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationContext,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => {\r\n        const preFixName = (name.match(/\\w+/) || [])[0];\r\n        return (isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name) ||\r\n            (watchFieldsRef.current.has(preFixName) &&\r\n                !isKey(name) &&\r\n                fieldArrayNamesRef.current.has(preFixName)));\r\n    };\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) || isFieldWatched(name);\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate) {\r\n            triggerValidation(name);\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContext);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContext).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationContext, validationResolver]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames)\r\n                ? watchFieldArrayRef.current[fieldNames]\r\n                : undefined);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContext);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationContext,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value && isHTMLElement(value.ref) && value.ref.closest) {\r\n                    try {\r\n                        value.ref.closest('form').reset();\r\n                        break;\r\n                    }\r\n                    catch (_a) { }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs();\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        return payload && payload.nest\r\n            ? transformToNestObject(fieldValues)\r\n            : fieldValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const control = Object.assign(Object.assign({ register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { formState, mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        watchFieldArrayRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef });\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    const context = useContext(FormGlobalContext);\r\n    if (!isUndefined(context))\r\n        return context;\r\n    throw new Error('Missing FormContext');\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign(Object.assign({}, (isObject(value) ? value : { value })), { [keyName]: generateId() }));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : data.filter((_, i) => (isArray(index) ? index : [index]).indexOf(i) < 0);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useRef: useRef$1, useState: useState$1 } = React;\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldArrayRef, validFieldsRef, fieldsWithValidationRef, validateSchemaIsValid, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\r\n    const appendValueWithKey = (value) => value.map((v) => appendId(v, keyName));\r\n    const commonTasks = (fieldsValues) => {\r\n        watchFieldArrayRef.current[name] = fieldsValues;\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        commonTasks([\r\n            ...fields,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields();\r\n        commonTasks(prependAt(fields, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(removeArrayAt(fields, index));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            fields.forEach((field, fieldIndex) => {\r\n                if (isUndefined(index) ||\r\n                    fieldIndex === index ||\r\n                    (isArray(index) && index.indexOf(fieldIndex) >= 0)) {\r\n                    for (const key in field) {\r\n                        const removeFieldName = `${name}[${index}].${key}`;\r\n                        validFieldsRef.current.delete(removeFieldName);\r\n                        fieldsWithValidationRef.current.delete(removeFieldName);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(insertAt(fields, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(fields, indexA, indexB);\r\n        commonTasks([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(fields, from, to);\r\n        commonTasks([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        watchFieldArrayRef.current[name] = {};\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    if (!fieldsRef.current[name]) {\r\n        registerField();\r\n        setInputStateValue(isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue);\r\n    }\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}