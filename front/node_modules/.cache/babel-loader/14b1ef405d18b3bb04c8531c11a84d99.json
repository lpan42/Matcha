{"ast":null,"code":"var _jsxFileName = \"/Users/lpan/Desktop/Matcha/front/src/contexts/profile/ProfileState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ProfileContext from './profileContext';\nimport ProfileReducer from './profileReducer';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { GET_PROFILE, GET_PROFILE_NO, CLEAR_MESSAGE, GET_INTERESTS_LIST, NORMAL_ERROR } from '../types';\n\nconst ProfileState = props => {\n  const initialState = {\n    profile: null,\n    emptyProfile: null,\n    interests_list: null,\n    loading: true,\n    error: null,\n    success: null\n  };\n  const [state, dispatch] = useReducer(ProfileReducer, initialState);\n\n  const getProfile = async userid => {\n    setAuthToken(localStorage.token);\n\n    try {\n      const result = await axios.get(`/user/profile/${userid}`);\n      dispatch({\n        type: GET_PROFILE,\n        payload: result.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_PROFILE_NO,\n        payload: err.response.data.error\n      });\n    }\n  };\n\n  const getInterestsList = async () => {\n    try {\n      const result = await axios.get('/user/interests_list');\n      console.log(\"result\");\n      dispatch({\n        type: GET_INTERESTS_LIST,\n        payload: result.data\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const clearMessage = () => {\n    dispatch({\n      type: CLEAR_MESSAGE\n    });\n  };\n\n  return React.createElement(ProfileContext.Provider, {\n    value: {\n      profile: state.profile,\n      emptyProfile: state.emptyProfile,\n      loading: state.loading,\n      error: state.error,\n      success: state.success,\n      interests_list: state.interests_list,\n      getProfile,\n      getInterestsList,\n      clearMessage\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ProfileState;","map":{"version":3,"sources":["/Users/lpan/Desktop/Matcha/front/src/contexts/profile/ProfileState.js"],"names":["React","useReducer","axios","ProfileContext","ProfileReducer","setAuthToken","GET_PROFILE","GET_PROFILE_NO","CLEAR_MESSAGE","GET_INTERESTS_LIST","NORMAL_ERROR","ProfileState","props","initialState","profile","emptyProfile","interests_list","loading","error","success","state","dispatch","getProfile","userid","localStorage","token","result","get","type","payload","data","err","response","getInterestsList","console","log","clearMessage","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,SACIC,WADJ,EAEIC,cAFJ,EAGIC,aAHJ,EAIIC,kBAJJ,EAKIC,YALJ,QAMO,UANP;;AAQA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAMC,YAAY,GAAG;AACjBC,IAAAA,OAAO,EAAE,IADQ;AAEjBC,IAAAA,YAAY,EAAE,IAFG;AAGjBC,IAAAA,cAAc,EAAE,IAHC;AAIjBC,IAAAA,OAAO,EAAE,IAJQ;AAKjBC,IAAAA,KAAK,EAAE,IALU;AAMjBC,IAAAA,OAAO,EAAE;AANQ,GAArB;AASA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,UAAU,CAACG,cAAD,EAAiBS,YAAjB,CAApC;;AAEA,QAAMS,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACjClB,IAAAA,YAAY,CAACmB,YAAY,CAACC,KAAd,CAAZ;;AACA,QAAG;AACC,YAAMC,MAAM,GAAI,MAAMxB,KAAK,CAACyB,GAAN,CAAW,iBAAgBJ,MAAO,EAAlC,CAAtB;AACAF,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEtB,WADD;AAELuB,QAAAA,OAAO,EAAEH,MAAM,CAACI;AAFX,OAAD,CAAR;AAIH,KAND,CAMC,OAAMC,GAAN,EAAU;AACPV,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAErB,cADD;AAELsB,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBZ;AAFtB,OAAD,CAAR;AAIH;AACJ,GAdD;;AAgBA,QAAMe,gBAAgB,GAAG,YAAY;AACjC,QAAG;AACC,YAAMP,MAAM,GAAI,MAAMxB,KAAK,CAACyB,GAAN,CAAU,sBAAV,CAAtB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAd,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEnB,kBADD;AAELoB,QAAAA,OAAO,EAAEH,MAAM,CAACI;AAFX,OAAD,CAAR;AAIH,KAPD,CAQA,OAAMC,GAAN,EAAU;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACJ;AACJ,GAZD;;AAcA,QAAMK,YAAY,GAAG,MAAM;AACvBf,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEpB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,SACI,oBAAC,cAAD,CAAgB,QAAhB;AACI,IAAA,KAAK,EAAE;AACHM,MAAAA,OAAO,EAAEM,KAAK,CAACN,OADZ;AAEHC,MAAAA,YAAY,EAAEK,KAAK,CAACL,YAFjB;AAGHE,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAHZ;AAIHC,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAJV;AAKHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OALZ;AAMHH,MAAAA,cAAc,EAAEI,KAAK,CAACJ,cANnB;AAOHM,MAAAA,UAPG;AAQHW,MAAAA,gBARG;AASHG,MAAAA;AATG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaCxB,KAAK,CAACyB,QAbP,CADJ;AAiBH,CAjED;;AAkEA,eAAe1B,YAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ProfileContext from './profileContext';\nimport ProfileReducer from './profileReducer';\nimport setAuthToken from '../../utils/setAuthToken';\n\nimport {\n    GET_PROFILE, \n    GET_PROFILE_NO, \n    CLEAR_MESSAGE, \n    GET_INTERESTS_LIST,\n    NORMAL_ERROR\n} from '../types';\n\nconst ProfileState = props => {\n    const initialState = {\n        profile: null,\n        emptyProfile: null,\n        interests_list: null,\n        loading: true,\n        error: null,\n        success: null\n    }\n\n    const [state, dispatch] = useReducer(ProfileReducer, initialState);\n\n    const getProfile = async (userid) => {\n        setAuthToken(localStorage.token);\n        try{\n            const result =  await axios.get(`/user/profile/${userid}`);\n            dispatch({\n                type: GET_PROFILE,\n                payload: result.data\n            });\n        }catch(err){\n            dispatch({\n                type: GET_PROFILE_NO,\n                payload: err.response.data.error\n            });\n        }\n    }\n\n    const getInterestsList = async () => {\n        try{\n            const result =  await axios.get('/user/interests_list');\n            console.log(\"result\")\n            dispatch({\n                type: GET_INTERESTS_LIST,\n                payload: result.data\n            });\n        }\n        catch(err){\n             console.log(err);\n        }\n    }\n\n    const clearMessage = () => {\n        dispatch({\n            type: CLEAR_MESSAGE\n        })\n    }\n    \n    return (\n        <ProfileContext.Provider\n            value={{\n                profile: state.profile,\n                emptyProfile: state.emptyProfile,\n                loading: state.loading,\n                error: state.error,\n                success: state.success,\n                interests_list: state.interests_list,\n                getProfile,\n                getInterestsList,\n                clearMessage\n            }}\n        >\n        {props.children}\n        </ProfileContext.Provider>\n    )\n}\nexport default ProfileState;"]},"metadata":{},"sourceType":"module"}